<link href="~/Styles/ChessBoard.css" rel="stylesheet" />
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>

@model Chess.Models.GameViewModel

@{
    ViewBag.Title = "Game Room";

    const string defaultcellclasses = "cell ";
    string cellclasses = "";
    bool celldisabled;
    string cellvalue = "";
    string cellname;
    char[] colnamelist = new char[10] { ' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', ' ' };
}
<input type="hidden" id="fromCell" name="fromCell" value="">
<input type="hidden" id="toCell" name="toCell" value="">
<input type="hidden" id="RoomId" name="RoomId" value="@Model.RoomId">
<script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
<script src="~/signalr/hubs"></script>
<script>
    var chat;
  
    </script>


<h2>Play Chess</h2>
<div class="modal fade" id="myModal" role="dialog" data-backdrop="false" aria-hidden="true">
    <div class="modal-dialog">
        @{
            var colorstring = Model.Color == Chess.Enums.SideColor.Black ? "blackcell" : "whitecell";
        }
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Pawn Promotion</h4>
            </div>
            <div class="modal-body ">
                <p>Make Your Choice!</p>

                <div class="container-fluid">
                    <div class="row">
                        <div class="col-sm-3">
                            <button id="Rook" name="Rook" data-dismiss="modal" class="promotioncell " + @colorstring +" style="height: 50px; width: 50px;">
                            </button>
                        </div>
                        <div class="col-sm-3">
                            <button id="Knight" name="Knight" data-dismiss="modal" class="promotioncell " + @colorstring +" style="height: 50px; width: 50px;">
                            </button>
                        </div>
                        <div class="col-sm-3">
                            <button id="Bishop" name="Bishop" data-dismiss="modal" class="promotioncell " + @colorstring +" style="height: 50px; width: 50px;">
                            </button>
                        </div>
                        <div class="col-sm-3">
                            <button id="Queen" name="Queen" data-dismiss="modal" class="promotioncell " + @colorstring +" style="height: 50px; width: 50px;">
                            </button>
                        </div>
                    </div>

                </div>




            </div>
            <div class="modal-footer">

            </div>
        </div>

    </div>
</div>
<!-- Chess Board Area -->
<div id="ChessBoard" class="ChessBoard" style="height: 300px; width: 300px;">
    @{
        string GetCell(int row, int col)
        {


            // Set cell names ("cell90", "cell99", "cell00", "cell09")
            cellname = "cell" + row + col;
            // If buttons are play area
            if (row < 9 && row > 0 && col > 0 && col < 9)
            {
                // Set default classes to playground cells
                cellclasses = defaultcellclasses;

                // Is Cell Disabled?
                celldisabled = false;

                // Set playground cells values
                cellvalue = "";

                // Set Cell Colors
                if ((row % 2 == 0 && col % 2 == 0) || (row % 2 == 1 && col % 2 == 1))
                {
                    Console.WriteLine("a");
                    cellclasses += " browncell";
                }
                else
                {
                    cellclasses += " whitecell";
                }


            }
            else
            // If buttons are info buttons for user
            {
                // Set row names to info area
                if ((col == 0 || col == 9) && row > 0 && row < 9)
                {
                    cellvalue = row.ToString();
                }
                // Set col numbers to info area
                else if ((row == 0 || row == 9) && col > 0 && col < 9)
                {
                    cellvalue = colnamelist[col].ToString();
                }
                // Set corner cells names
                else
                {
                    cellvalue = "";
                }

                cellclasses = defaultcellclasses + " infocell";
                celldisabled = true;
            }
            string cell = "<button id=\"" + @cellname + "\" name=\"" + @cellname + "\" class=\"" + @cellclasses + "\" " + (celldisabled ? ("disabled=\"" + @celldisabled + "\"") : "") + " >"
                + @cellvalue + "</button>";
            return cell;
        }

    }
    @{
        if (Model.Color == Chess.Enums.SideColor.Black)
        {
            for (int row = 0; row <= 9; row++)
            {
                for (int col = 9; col >= 0; col--)
                {
                    // GetBoard(col, row);
                    @Html.Raw(GetCell(row, col));
                }
            }
        }
        else
        {
            for (int row = 9; row >= 0; row = row - 1)
            {
                for (int col = 0; col <= 9; col = col + 1)
                {
                    // GetBoard(col, row);
                    @Html.Raw(GetCell(row, col));
                }
            }
        }

    }
</div>







<script>
    console.log("AboutPage");

    var turn;
    var model;
    var fromCell;
    var toCell;
    var roomid;

    chat =  $.connection.chessHub;
    chat.client.addChatMessage = function (name, message) {
        console.log(message);
        ajaxpost();
            };
     $.connection.hub.start().done(function () {

        console.log("done");
        setGame();
    }).fail(function () { console.log("fail"); });
    



    $(document).ready(function () {

               // Reference the auto-generated proxy for the hub.
            
        
        
    });
    function ajaxpost() {
        var t = {
            fromCell: fromCell,
            toCell: toCell,
            roomid: roomid
        };
        $.ajax({
            type: "GET",
            url: "/Game/Room2",
            datatype: "Json",
            contentType: "application/json; charset=utf-8",
            data: t,
            success: function (e) {
                console.log("ajax success" + e.BlackUserId);
                if (e != undefined) {
                    model = e;
                    fillBoard();
                }

            }
        })
    }


</script>


<div id="replacedDiv">

    <script>


    var pieceList;
        var receiverid;
        var themeName;
        var color;
        var sideColorEnum = { "White": 0, "Black": 1 }
        var gameStatusEnum = {
            "Continues": 0,
            "WhiteThreat": 1,
            "BlackThreat": 2,
            "WhiteWon": 3,
            "BlackWon": 4,
            "Scoreless": 5,
            "Promotion": 6
        };

        var secondClick = false;
        function string_of_enum(ofenum, value)
        {
            for (var k in ofenum) if (ofenum[k] == value)
                return k;
            return null;
        }
         
       async function fillBoard() {
             
  
            console.log("filled");
            pieceList = model.Pieces;
            roomid = model.RoomId;
            $(".cell").css("background-image", "none").removeAttr('playable');

            for (var i = 0; i < pieceList.length; i++) {
            var cell = pieceList[i].Row.toString() + pieceList[i].Col.toString();
            color = pieceList[i].Color;
            $("#cell" + pieceList[i].Row.toString() + pieceList[i].Col.toString())
                .css("background-image", "url(\"../Media/PieceThemes/" + themeName + "/" + string_of_enum(sideColorEnum, color) + "/" + pieceList[i].Name + ".png\")")
                .css("background-size", "100%");

                if (color == model.Color && model.Color == model.Turn) {
                        document.getElementById("cell" + cell).setAttribute('playable', "true");
                    }
            }
            if (model.GameStatus == gameStatusEnum.Promotion && model.Color == model.Turn) {
                $("#myModal").modal();
               // myModal.toggle();
               // myModal.show();
            }
            if (turn != model.Turn) {

                     chat.server.sendChatMessage(receiverid, "refresh");

            }
            turn = model.Turn;

        }

        async function setGame() {
            console.log("setGame");

            document.getElementById("toCell").value = "";
            document.getElementById("fromCell").value = "";

            themeName = "Default";
            if (model == undefined)
                model = @Html.Raw(Json.Encode(Model));

            receiverid = model.Color == sideColorEnum.Black ? model.WhiteUserId : model.BlackUserId;

            fillBoard()

            //#region promotionModalSet
             color = model.Turn;
                $("#Rook")
                    .css("background-image", "url(\"../Media/PieceThemes/" + themeName + "/" + string_of_enum(sideColorEnum, color) + "/Rook.png\")")
                    .css("background-size", "100%");
                $("#Knight")
                    .css("background-image", "url(\"../Media/PieceThemes/" + themeName + "/" + string_of_enum(sideColorEnum, color) + "/Knight.png\")")
                    .css("background-size", "100%");
                $("#Bishop")
                    .css("background-image", "url(\"../Media/PieceThemes/" + themeName + "/" + string_of_enum(sideColorEnum, color) + "/Bishop.png\")")
                    .css("background-size", "100%");
                $("#Queen")
                    .css("background-image", "url(\"../Media/PieceThemes/" + themeName + "/" + string_of_enum(sideColorEnum, color) + "/Queen.png\")")
                .css("background-size", "100%");

                $(".promotioncell").click(function () {
                    console.log("Choiced." + this.name);
                    toCell = this.name;
                    fromCell = "Pawn";

                     chat.server.sendChatMessage(receiverid, "refresh");

                     ajaxpost();

                    });
            //#endregion

            console.log(string_of_enum(gameStatusEnum, model.GameStatus));

            $(".cell").click(function () {
                console.log("cliced");
                if (secondClick) {
                    secondClick = false;
                    document.getElementById("toCell").value = this.name;
                    console.log("secondClick");

                    fromCell = document.getElementById("fromCell").value;
                    toCell = document.getElementById("toCell").value;


                    console.log("before");
                    ajaxpost();
                    console.log("after");
                }
                else if (!this.hasAttribute('playable'))
                {
                    console.log("null cell");
                }
                else {
                    document.getElementById("fromCell").value = this.name;
                    console.log("FirstClick");
                    secondClick = true;
                }
            });

            console.log("Setted");
        }

    </script>


</div>